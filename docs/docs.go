// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "Auth creds JSON",
                        "name": "creds",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.UserAuthInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.LoginOutput"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Register a user",
                "parameters": [
                    {
                        "description": "Auth creds JSON",
                        "name": "creds",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.UserAuthInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.RegisterOutput"
                        }
                    }
                }
            }
        },
        "/service": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a service.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Service JSON",
                        "name": "service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateServiceInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.ServiceOutput"
                        }
                    }
                }
            }
        },
        "/service/{id}": {
            "get": {
                "description": "If the 'versions' query param is absent/false, versions is omitted from the response.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get requested service.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Return related versions",
                        "name": "versions",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.GetServiceWithVersionsOutput"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update a service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Service update JSON",
                        "name": "version",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateServiceInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.ServiceOutput"
                        }
                    }
                }
            }
        },
        "/service/{id}/version": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a version for a service",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Version JSON",
                        "name": "version",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateVersionInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.CreateVersionOutput"
                        }
                    }
                }
            }
        },
        "/services": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "List all services for the authenticated user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Query offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Key to sort records by",
                        "name": "sortKey",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Sort records in descending order",
                        "name": "descending",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search records by name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.ListServicesOutput"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.CreateVersionOutput": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Version"
                }
            }
        },
        "api.GetServiceWithVersionsOutput": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/api.ServiceWithVersions"
                }
            }
        },
        "api.ListServicesOutput": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Service"
                    }
                }
            }
        },
        "api.LoginOutput": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                }
            }
        },
        "api.RegisterOutput": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "api.ServiceOutput": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Service"
                }
            }
        },
        "api.ServiceWithVersions": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                },
                "versions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Version"
                    }
                }
            }
        },
        "api.UserAuthInput": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 20
                },
                "username": {
                    "type": "string",
                    "maxLength": 20
                }
            }
        },
        "models.CreateServiceInput": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.CreateVersionInput": {
            "type": "object",
            "required": [
                "version"
            ],
            "properties": {
                "changelog": {
                    "type": "string"
                },
                "serviceID": {
                    "type": "integer"
                },
                "userID": {
                    "type": "integer"
                },
                "version": {
                    "type": "string",
                    "maxLength": 50
                }
            }
        },
        "models.Service": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                },
                "versions": {
                    "description": "Versions contains the different versions of this service.\nIt helps us fetch the versions without a JOIN query.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.UpdateServiceInput": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.Version": {
            "type": "object",
            "properties": {
                "changelog": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "serviceID": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
